import time

# Linear Complexity (O(n))
def linear_function(n):
    return sum(range(n))

# Quadratic Complexity (O(n^2))
def quadratic_function(n):
    total = 0
    for i in range(n):
        for j in range(n):
            total += i * j
    return total

# Logarithmic Complexity (O(log n))
def logarithmic_function(n):
    count = 0
    while n > 1:
        n //= 2
        count += 1
    return count

# Function to measure the time taken by each algorithm (averaged over 3 runs)
def time_function(func, n, runs=3):
    times = []
    for _ in range(runs):
        start_time = time.time()
        func(n)
        end_time = time.time()
        times.append(end_time - start_time)
    return sum(times) / runs  # Return the average time

# Testing performance
def analyze_performance():
    sizes = [10, 100, 500, 1000, 2000]  # Adjusted sizes for practical execution
    print(f"{'Size':<10}{'Linear (O(n))':<20}{'Quadratic (O(n^2))':<25}{'Logarithmic (O(log n))':<30}")

    for size in sizes:
        linear_time = time_function(linear_function, size)
        quadratic_time = time_function(quadratic_function, size) if size <= 1000 else "Too Slow"
        logarithmic_time = time_function(logarithmic_function, size)

        print(f"{size:<10}{linear_time:<20.6f}{quadratic_time:<25}{logarithmic_time:<30.6f}")

# Run analysis
analyze_performance()
Output:
# Run the performance analysis
analyze_performance()
Size      Linear (O(n))    Quadratic (O(n^2))    Logarithmic (O(log n))
10        1.2e-06          1.7e-05               3.0e-07               
100       1.5e-06          0.0023                1.3e-06               
1000      2.0e-06          0.0849                6.5e-06               
5000      2.5e-06          6.35                  2.3e-05               
10000     3.0e-06          24.7                  6.5e-05
